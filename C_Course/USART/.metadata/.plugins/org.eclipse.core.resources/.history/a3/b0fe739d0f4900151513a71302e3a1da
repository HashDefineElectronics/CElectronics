///////////////////////////////////////////////////////////////////////////////
/// \file Debug_MainMenu.h
/// \author Ronald Sousa
/// \website www.HashDefineElectronics.com
/// \company Hash Define Electronics Ltd
///
/// \brief  handles the debug main screen used by our serial interface
///
///
/// \setion Project Dependency
/// Compiler: Microchip XC32 v1.34
/// library: Microchip Harmony v1.03.01
/// IDE: Microchip MPLABX v2.26
///////////////////////////////////////////////////////////////////////////////
#include "../common.h"
#ifdef EN_DEBUG_INTERFACE
#include "./DebugInterface.h"

///////////////////////////////////////////////////////////////////////////////
/// \brief Draw main menu
///////////////////////////////////////////////////////////////////////////////
static void SDebug_DrawMainMenu(void)
{
    SDebug_WriteString( "\n\r"
                        "S1. Set LED State\n\r"
                      );
}
///////////////////////////////////////////////////////////////////////////////
/// \brief This is the menu options
///////////////////////////////////////////////////////////////////////////////
typedef enum
{
    SDCommand_LEDControl = 1,
    SDCommand_TestFlash,
    SDCommand_ReleaseFlash,
    SDCommand_ReturnTickValue,
    SDCommand_SendStart,
    SDCommand_SendStop,
} SDebug_CommandCode;

///////////////////////////////////////////////////////////////////////////////
/// \brief Process the screen command
///
/// \param SystemData system parameter data struture
/// \return true on success else false
///////////////////////////////////////////////////////////////////////////////
static struct SDMenuStruture * SDebug_MainMenu(SDebugType *SystemData)
{
    uint8_t Buffer[1024];
    uint32_t CurrentTickCounter = 0;
    float TickInSecond = 0;
    static uint32_t NumberOFPulse = 1;
    static uint32_t PulseUpdateRate = 100;

    switch(SystemData->Parameter[0].Data.ui32_t[0])
    {
        case SDCommand_LEDControl:

            if( SystemData->ParameterLength > 1)
            {
                if(SystemData->Parameter[1].Data.ui32_t[0])
                {
                    PLIB_PORTS_PinClear( PORTS_ID_0, PORT_CHANNEL_A, PORTS_BIT_POS_0 );
                }
                else
                {
                    PLIB_PORTS_PinSet( PORTS_ID_0, PORT_CHANNEL_A, PORTS_BIT_POS_0 );
                }
            }
            else
            {
                PLIB_PORTS_PinToggle( PORTS_ID_0, PORT_CHANNEL_A, PORTS_BIT_POS_0 );
            }

        break;
        case SDCommand_TestFlash:

            SDebug_WriteString("Testing FLASH\r\n");

            if( FEnum_OK != FALSH_Start() )
            {
                SDebug_WriteString("FLASH error\r\n");
            }
            else
            {
                SDebug_WriteString("FLASH passed\r\n");
            }
            break;

        case SDCommand_ReleaseFlash:
            Flash_ReleaseFlash();
            SDebug_WriteString("FLASH SPI released\r\n");
            break;
        break;
        case SDCommand_ReturnTickValue:
            CurrentTickCounter = Tick_GetMs();
            TickInSecond = CurrentTickCounter;
            TickInSecond = ( ( (0.001 * CurrentTickCounter) ));

            snprintf(&Buffer[0], 50, "Tick: %0.2fsec %0.2fmin [%u]\n\r",TickInSecond,  (TickInSecond /60) , CurrentTickCounter);

            SDebug_WriteString(&Buffer[0]);
            break;
        case SDCommand_SendStart:
            if( SystemData->ParameterLength > 2)
            {
                NumberOFPulse = SystemData->Parameter[1].Data.ui32_t[0];
                PulseUpdateRate = SystemData->Parameter[2].Data.ui32_t[0];
            }
            
            ULTRA_Start(NumberOFPulse,PulseUpdateRate);
            break;
        case SDCommand_SendStop:
            ULTRA_Stop();
            break;
        default:
            break;
    }

    return 0;
}

///////////////////////////////////////////////////////////////////////////////
/// \brief This is the defualt menu screen
///////////////////////////////////////////////////////////////////////////////
struct SDMenuStruture  DefaultMenu = {
    "Main Menu",
    SDebug_DrawMainMenu,
    NULL,
    SDebug_MainMenu
};

#endif // EN_DEBUG_INTERFACE
