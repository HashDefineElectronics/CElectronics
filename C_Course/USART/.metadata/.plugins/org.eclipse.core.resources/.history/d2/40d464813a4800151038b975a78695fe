/////////////////////////////////////////////////////////////////////////
/// \file uart2.c
/// \brief implements mili-second tick counter.
///
/// \section UartLayer Serial Layer
///
/// Author: Ronald Sousa (Opticalworm)
/////////////////////////////////////////////////////////////////////////
#include "tick.h"

/////////////////////////////////////////////////////////////////////////
/// \brief defines the frequency we want the system tick to trigger.
/// for 1ms = 1/1000hz
/////////////////////////////////////////////////////////////////////////
#define TIMER_FREQUENCY_HZ 1000

/////////////////////////////////////////////////////////////////////////
/// \brief Current system tick count since boot-up.
/// \note tick is expected to overflow.
/////////////////////////////////////////////////////////////////////////
static volatile uint32_t TickCounter;

/////////////////////////////////////////////////////////////////////////
/// \brief setup the ARM M0 tick counter to trigger every 1ms
/////////////////////////////////////////////////////////////////////////
void Tick_init(void)
{
    // configure the system tick so that it trigger every one ms
  SysTick_Config(SystemCoreClock / TIMER_FREQUENCY_HZ);
}

uint32_t Tick_GetCurrentTick(void)
{
    return TickCounter;
}


void Tick_DelayMs (uint32_t delayMs)
{
  uint32_t StartTickValue;

  StartTickValue = TickCounter;

  // sit in the while loop until the difference between the start tick
  // and current tick is greater than or equal to
  // the delayMs.
  while((TickCounter - StartTickValue) < delayMs);

}

void SysTick_Handler (void)
{
    TickCounter++;
}

// ----------------------------------------------------------------------------
